name: Development Environment Check

on:
  push:
    branches: [ develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quick-checks:
    name: Quick Development Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies (development only)
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run Python code formatting check
      run: |
        black --check --diff src/ --line-length 88

    - name: Run Python import sorting check
      run: |
        isort --check-only --diff src/

    - name: Run Python linting (quick)
      run: |
        flake8 src/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run TypeScript type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Run ESLint (quick)
      working-directory: ./frontend
      run: npm run lint -- --max-warnings 0

    - name: Check Docker files
      run: |
        docker-compose -f docker-compose.yml config --quiet

    - name: Validate configuration files
      run: |
        # Check pyproject.toml validity
        python -c "import tomllib; tomllib.load(open('pyproject.toml', 'rb'))" 2>/dev/null || python -c "import tomli; tomli.load(open('pyproject.toml', 'rb'))"

        # Check frontend package.json
        node -e "console.log(JSON.parse(require('fs').readFileSync('frontend/package.json')).name)"

  build-check:
    name: Build Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        NODE_ENV: production

    - name: Check build output
      working-directory: ./frontend
      run: |
        if [ ! -d "dist" ]; then
          echo "❌ Frontend build failed - dist directory not found"
          exit 1
        fi

        if [ ! -f "dist/index.html" ]; then
          echo "❌ Frontend build failed - index.html not found"
          exit 1
        fi

        echo "✅ Frontend build successful"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README files
      run: |
        if [ ! -f "README.md" ]; then
          echo "⚠️  Root README.md not found"
        fi

        if [ ! -f "CLAUDE.md" ]; then
          echo "⚠️  CLAUDE.md not found"
        fi

    - name: Check API documentation
      run: |
        # Check if API endpoints have proper docstrings
        python -c "
        import ast
        import os

        api_dir = 'src/edusched/api'
        if os.path.exists(api_dir):
            for root, dirs, files in os.walk(api_dir):
                for file in files:
                    if file.endswith('.py'):
                        filepath = os.path.join(root, file)
                        with open(filepath, 'r') as f:
                            content = f.read()
                            if 'def ' in content and '\"\"\"' not in content:
                                print(f'⚠️  Missing docstring in {filepath}')
        "

    - name: Check for TODO comments
      run: |
        # Count TODO comments (excluding this file)
        TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX" src/ frontend/src/ --include="*.py" --include="*.ts" --include="*.js" --include="*.vue" | grep -v "test" | wc -l)
        echo "Found $TODO_COUNT TODO/FIXME/XXX comments"
        echo "::notice::Found $TODO_COUNT TODO/FIXME/XXX comments in codebase"