name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.12'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: edusched_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: ['3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]"
        pip install pytest pytest-xvfb

    - name: Wait for services
      run: |
        while ! pg_isready -h localhost -p 5432; do sleep 1; done
        while ! redis-cli -h localhost -p 6379 ping; do sleep 1; done

    - name: Run database migrations
      run: |
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/edusched_test
        alembic upgrade head

    - name: Run pytest with coverage
      run: |
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/edusched_test
        export REDIS_URL=redis://localhost:6379
        pytest \
          --cov=edusched \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -v \
          tests/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

    - name: Run code quality checks
      run: |
        isort --check-only --diff src/
        black --check --diff src/
        flake8 src/
        mypy src/

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['18.x']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run formatting check
      working-directory: ./frontend
      run: |
        npm run format
        if [ -n "$(git status --porcelain)" ]; then
          echo "‚ùå Code formatting issues found. Please run 'npm run format'."
          git diff --exit-code
          exit 1
        fi

    - name: Run unit tests
      working-directory: ./frontend
      run: |
        npm run test:coverage
      env:
        CI: true

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.backend
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/edusched-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/edusched-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/edusched-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/edusched-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/edusched
          docker-compose pull
          docker-compose up -d backend frontend
          docker system prune -f

    - name: Run integration tests on staging
      if: github.ref == 'refs/heads/main'
      run: |
        # Wait for services to be ready
        sleep 30

        # Run basic health checks
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1

        # Run API endpoint tests
        curl -f ${{ secrets.STAGING_URL }}/api/v1/schools/ || exit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install performance testing tools
      run: |
        python -m pip install --upgrade pip
        pip install locust pytest-benchmark

    - name: Run performance tests
      run: |
        cd tests/performance
        locust --host=http://localhost:8000 --users 100 --spawn-rate 10 --run-time 1m --headless
        pytest benchmark/

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          tests/performance/results/
          benchmark_results.json